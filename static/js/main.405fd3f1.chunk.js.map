{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","_useState","useState","_useState2","_slicedToArray","todos","setTodos","_useState3","_useState4","newTodo","setNewTodo","_useState5","_useState6","editedTodo","setEditedTodo","useEffect","storedTodos","localStorage","getItem","JSON","parse","length","setItem","stringify","handleDragOver","e","preventDefault","React","createElement","className","onSubmit","priority","trim","nextPriority","Math","max","apply","_toConsumableArray","map","todo","id","uuidv4","text","completed","prevTodos","concat","addTodo","type","placeholder","value","onChange","target","index","key","draggable","onDragStart","dataTransfer","setData","handleDragStart","onDragOver","onDrop","targetId","draggedId","getData","draggedIndex","findIndex","targetIndex","updatedTodos","_ref","handleDrop","_objectSpread","onBlur","newText","Fragment","onClick","onDoubleClick","FiTrash","filter","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.405fd3f1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FiTrash } from 'react-icons/fi';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './App.css';\r\n\r\ntype Todo = {\r\n    id: string;\r\n    text: string;\r\n    completed: boolean;\r\n    priority: number;\r\n};\r\n\r\nconst App: React.FC = () => {\r\n\r\n\r\n    const [todos, setTodos] = useState<Todo[]>([]);\r\n    const [newTodo, setNewTodo] = useState('');\r\n    const [editedTodo, setEditedTodo] = useState<Todo | null>(null);\r\n\r\n    useEffect(() => {\r\n        const storedTodos = localStorage.getItem('todo-list');\r\n        //console.log(localStorage);\r\n        if (storedTodos) {\r\n            setTodos(JSON.parse(storedTodos))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (todos.length > 0) {\r\n        localStorage.setItem('todo-list', JSON.stringify(todos))}\r\n        //console.log(localStorage);\r\n    }, [todos]);\r\n\r\n\r\n    const addTodo = (priority: number) => {\r\n        if (newTodo.trim() === '') return;\r\n\r\n        const maxPriority = todos.length > 0 ? Math.max(...todos.map(todo => todo.priority)) : -1;\r\n        const nextPriority = maxPriority + 1;\r\n\r\n\r\n        const todo: Todo = {\r\n            id: uuidv4(),\r\n            text: newTodo,\r\n            completed: false,\r\n            priority: nextPriority,\r\n        };\r\n\r\n        setTodos((prevTodos) => [...prevTodos, todo]);\r\n        setNewTodo('');\r\n    }\r\n\r\n    const deleteTodo = (id: string) => {\r\n        setTodos(todos.filter((todo) => todo.id !== id))\r\n    }\r\n\r\n    const toggleTodoCompletion = (id: string) => {\r\n        setTodos(\r\n            todos.map((todo) => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed,\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        )\r\n    }\r\n\r\n    const handleFormSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault(); // Prevents the default form submission behaviour\r\n        addTodo(1); // Call the addTodo function to add the new todo\r\n    };\r\n\r\n    const handleTodoEdit = (id: string, text: string) => {\r\n        setEditedTodo({\r\n            id: id,\r\n            text: text,\r\n            completed: false,\r\n            priority: 0,\r\n        });\r\n\r\n    };\r\n\r\n    const handleTodoUpdate = (id: string, newText: string) => {\r\n        setTodos(\r\n            todos.map((todo) => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        text: newText,\r\n                    }\r\n                }\r\n                return todo;\r\n            })\r\n        );\r\n        setEditedTodo(null);\r\n\r\n    };\r\n\r\n    const handleDragStart = (e: React.DragEvent<HTMLLIElement>, id: string) => {\r\n        e.dataTransfer.setData('text/plain', id);\r\n    };\r\n\r\n    const handleDragOver = (e: React.DragEvent<HTMLLIElement>) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleDrop = (e: React.DragEvent<HTMLLIElement>, targetId: string) => {\r\n        e.preventDefault();\r\n\r\n        const draggedId = e.dataTransfer.getData('text/plain');\r\n\r\n        // Find the index of the dragged todo\r\n        const draggedIndex = todos.findIndex((todo) => todo.id === draggedId);\r\n\r\n        // Find the index of the target todo\r\n        const targetIndex = todos.findIndex((todo) => todo.id === targetId);\r\n\r\n        // Swap the todos in the array\r\n        const updatedTodos = [...todos];\r\n        [updatedTodos[draggedIndex], updatedTodos[targetIndex]] = [updatedTodos[targetIndex], updatedTodos[draggedIndex],\r\n        ];\r\n\r\n        setTodos(updatedTodos);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>My Tasks</h1>\r\n            <form onSubmit={handleFormSubmit}>\r\n                <div className=\"todo-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Add a new todo\"\r\n                        value={newTodo}\r\n                        onChange={(e) => setNewTodo(e.target.value)}\r\n                    />\r\n                    <button type=\"submit\">Add</button>\r\n                </div>\r\n            </form>\r\n            <ul className=\"todo-list\">\r\n                {todos.map((todo, index) => (\r\n                    <li key={todo.id}\r\n                        draggable\r\n                        onDragStart={(e) => handleDragStart(e, todo.id)}\r\n                        onDragOver={handleDragOver}\r\n                        onDrop={(e) => handleDrop(e, todo.id)}\r\n                    >\r\n                        {editedTodo && editedTodo.id === todo.id ? (\r\n                            <input\r\n                                type=\"text\"\r\n                                value={editedTodo.text}\r\n                                onChange={(e) =>\r\n                                    setEditedTodo({\r\n                                        ...editedTodo,\r\n                                        text: e.target.value,\r\n                                    })\r\n                                }\r\n                                onBlur={() => handleTodoUpdate(editedTodo.id, editedTodo.text)}\r\n                            />\r\n\r\n                        ) : (\r\n                        <>\r\n                         <span\r\n                            className={`todo-text ${todo.completed ? 'completed' : ''}`}\r\n                            onClick={() => toggleTodoCompletion(todo.id)}\r\n                            onDoubleClick={() => handleTodoEdit(todo.id, todo.text)}\r\n                        >\r\n                            {todo.text}\r\n                            </span>\r\n                        \r\n                          <FiTrash className=\"delete-icon\" onClick={() => deleteTodo(todo.id)} />\r\n                        </>\r\n                        )}\r\n                    </li>       \r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\n//import './index.css';\r\nimport App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}