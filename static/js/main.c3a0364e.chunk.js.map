{"version":3,"sources":["components/TaskList.tsx","components/DateDisplay.tsx","components/Header.tsx","components/Instructions.tsx","App.tsx","index.tsx"],"names":["TaskList","_ref","todos","todoCompletedCount","filter","todo","completed","length","React","createElement","className","concat","DateDisplay","_useState","useState","_useState2","_slicedToArray","currentDate","setCurrentDate","useEffect","today","Date","toLocaleDateString","undefined","weekday","year","month","day","Fragment","Header","handleFormSubmit","newTodo","setNewTodo","onSubmit","type","placeholder","value","onChange","e","target","maxLength","Instructions","style","textAlign","App","setTodos","_useState3","_useState4","_useState5","_useState6","editedTodo","setEditedTodo","storedTodos","localStorage","getItem","JSON","parse","setItem","stringify","toggleTodoCompletion","id","map","_objectSpread","handleDragOver","preventDefault","trim","uuidv4","text","priority","prevTodos","_toConsumableArray","addTodo","index","key","draggable","onDragStart","dataTransfer","setData","handleDragStart","onDragOver","onDrop","targetId","draggedId","getData","draggedIndex","findIndex","targetIndex","updatedTodos","handleDrop","onBlur","newText","onClick","onDoubleClick","FiXCircle","removeItem","FiAlertCircle","FiCheckCircle","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c3a0364e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Todo, TaskListProps } from './todo';\r\n\r\nconst TaskList: React.FC<TaskListProps> = ({ todos }) => {\r\n\r\n    const todoCompletedCount = todos.filter((todo) =>  todo.completed === true ).length;\r\n\r\n    return (\r\n        <div className=\"task-counter\">\r\n            <ul>\r\n                <li>{`Tasks: ${todos.length}`}</li>\r\n                <li>{`Completed: ${todoCompletedCount}`}</li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst DateDisplay: React.FC = () => {\r\n    const [currentDate, setCurrentDate] = useState('');\r\n\r\n    useEffect(() => {\r\n        const today = new Date();\r\n        const options: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n        setCurrentDate(today.toLocaleDateString(undefined, options));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <p className=\"header-date\">{currentDate}</p>\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default DateDisplay;","import React from 'react';\r\nimport TaskList from './TaskList';\r\nimport DateDisplay from './DateDisplay';\r\nimport { Todo, HeaderProps } from './todo'\r\n\r\n\r\nconst Header: React.FC<HeaderProps> = ({\r\n    todos,\r\n    handleFormSubmit,\r\n    newTodo,\r\n    setNewTodo\r\n\r\n}) => {\r\n\r\n    return (\r\n\r\n        <header className=\"App-header\">\r\n            <h1>My Tasks</h1>\r\n            <DateDisplay />\r\n            <TaskList todos={todos} />\r\n            <form onSubmit={handleFormSubmit}>\r\n                <div className=\"todo-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Add a new todo\"\r\n                        value={newTodo}\r\n                        onChange={(e) => setNewTodo(e.target.value)}\r\n                        maxLength={112}\r\n                    />\r\n                    <button type=\"submit\">Add</button>\r\n                </div>\r\n            </form>\r\n        </header>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Instructions: React.FC = () => {\r\n    return (\r\n        <div style={{ textAlign: 'left' }}>\r\n            <h2>Instructions</h2>\r\n            <ol>\r\n                <li>Add some todos</li>\r\n                <li>Edit by double clicking/tapping</li>\r\n                <li>Drag to change the order</li>\r\n                <li>Delete, mark as important and tick when complete using the icons</li>\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Instructions;","import React, { useEffect, useState } from 'react';\r\nimport { FiXCircle, FiAlertCircle, FiCheckCircle } from 'react-icons/fi';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './App.css';\r\n\r\nimport Header from './components/Header';\r\nimport Instructions from './components/Instructions';\r\nimport { Todo } from './components/todo'\r\n\r\n\r\nconst App: React.FC = () => {\r\n    const [todos, setTodos] = useState<Todo[]>([]);\r\n    const [newTodo, setNewTodo] = useState('');\r\n    const [editedTodo, setEditedTodo] = useState<Todo | null>(null);\r\n   \r\n\r\n\r\n    useEffect(() => {\r\n        const storedTodos = localStorage.getItem('todo-list');\r\n        if (storedTodos) {\r\n            setTodos(JSON.parse(storedTodos));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (todos.length > 0) {\r\n            localStorage.setItem('todo-list', JSON.stringify(todos));\r\n        }\r\n    }, [todos]);\r\n\r\n    const addTodo = () => {\r\n        if (newTodo.trim() === '') return;\r\n\r\n        const todo: Todo = {\r\n            id: uuidv4(),\r\n            text: newTodo,\r\n            completed: false,\r\n            priority: false,\r\n        };\r\n\r\n        setTodos((prevTodos) => [...prevTodos, todo]);\r\n        setNewTodo('');\r\n    };\r\n\r\n    const deleteTodo = (id: string) => {\r\n        setTodos(todos.filter((todo) => todo.id !== id));\r\n\r\n        if (todos.length === 1) {\r\n\r\n            localStorage.removeItem('todo-list');\r\n        }\r\n\r\n    };\r\n\r\n    const toggleTodoCompletion = (id: string) => {\r\n        setTodos(\r\n            todos.map((todo) => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed,\r\n                    };\r\n                }\r\n                return todo;\r\n            })\r\n        );\r\n    };\r\n\r\n    const handleFormSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        addTodo();\r\n    };\r\n\r\n    const handleTodoEdit = (id: string, text: string) => {\r\n        setEditedTodo({\r\n            id: id,\r\n            text: text,\r\n            completed: false,\r\n            priority: false,\r\n        });\r\n    };\r\n\r\n    const handleTodoUpdate = (id: string, newText: string) => {\r\n        setTodos(\r\n            todos.map((todo) => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        text: newText,\r\n                    };\r\n                }\r\n                return todo;\r\n            })\r\n        );\r\n        setEditedTodo(null);\r\n    };\r\n\r\n    const handleDragStart = (e: React.DragEvent<HTMLLIElement>, id: string) => {\r\n        e.dataTransfer.setData('text/plain', id);\r\n    };\r\n\r\n    const handleDragOver = (e: React.DragEvent<HTMLLIElement>) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleDrop = (e: React.DragEvent<HTMLLIElement>, targetId: string) => {\r\n        e.preventDefault();\r\n\r\n        const draggedId = e.dataTransfer.getData('text/plain');\r\n        const draggedIndex = todos.findIndex((todo) => todo.id === draggedId);\r\n        const targetIndex = todos.findIndex((todo) => todo.id === targetId);\r\n\r\n        const updatedTodos = [...todos];\r\n        [updatedTodos[draggedIndex], updatedTodos[targetIndex]] = [\r\n            updatedTodos[targetIndex],\r\n            updatedTodos[draggedIndex],\r\n        ];\r\n\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    const handlePriorityToggle = (id: string) => {\r\n        setTodos(\r\n            todos.map((todo) => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        priority: !todo.priority,\r\n                    };\r\n                }\r\n                return todo;\r\n            })\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header\r\n                todos={todos}\r\n                handleFormSubmit={handleFormSubmit}\r\n                newTodo={newTodo}\r\n                setNewTodo={setNewTodo}\r\n\r\n            />\r\n            <main className=\"App-main\">\r\n                {todos.length < 1 ? (\r\n                    <Instructions />\r\n                    ) :  (\r\n                    <ul className=\"todo-list\">\r\n                        {todos.map((todo, index) => (\r\n                            <li\r\n                                key={todo.id}\r\n                                draggable\r\n                                onDragStart={(e) => handleDragStart(e, todo.id)}\r\n                                onDragOver={handleDragOver}\r\n                                onDrop={(e) => handleDrop(e, todo.id)}\r\n                                className={`${todo.priority ? 'todo-high-priority' : 'todo-low-priority' }`}\r\n                            >\r\n                                {editedTodo && editedTodo.id === todo.id ? (\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={editedTodo.text}\r\n                                        onChange={(e) =>\r\n                                            setEditedTodo({\r\n                                                ...editedTodo,\r\n                                                text: e.target.value,\r\n                                            })\r\n                                        }\r\n                                        onBlur={() => handleTodoUpdate(editedTodo.id, editedTodo.text)}\r\n                                    />\r\n                                ) : (\r\n                                    <>\r\n                                        <div\r\n                                            className={`todo-text ${todo.priority ? 'white' : ''} ${todo.completed ? 'completed' : ''}`}\r\n                                            onClick={() => toggleTodoCompletion(todo.id)}\r\n                                            onDoubleClick={() => handleTodoEdit(todo.id, todo.text)}\r\n                                        >\r\n                                           {todo.text}\r\n                                            </div>\r\n                                            <div className=\"todo-icons\">\r\n                                            <FiXCircle\r\n                                                className={`delete-icon ${todo.priority ? 'white' : ''}`}\r\n                                            onClick={() => deleteTodo(todo.id)}\r\n                                            />\r\n                                            <FiAlertCircle\r\n                                                className={`priority-icon ${todo.priority ? 'white' : ''}`}\r\n                                                onClick={() => handlePriorityToggle(todo.id)}\r\n                                            />\r\n                                            <FiCheckCircle\r\n                                                className={`completed-icon ${todo.completed ? 'green' : ''}`}\r\n                                                onClick={() => toggleTodoCompletion(todo.id)}\r\n                                                />\r\n                                            </div>\r\n                                    </>\r\n                                )}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                     )\r\n                }\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}